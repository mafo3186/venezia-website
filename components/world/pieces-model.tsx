/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/assets/pieces.glb --root=./public --output=public/assets/pieces-model.jsx --shadows --console
*/

import React, { useCallback } from "react";
import { useGLTF } from "@react-three/drei";
import { Color, Mesh } from "three";
import { ThreeEvent } from "@react-three/fiber";

export function Model(props) {
  const { nodes, materials } = useGLTF("/assets/pieces.glb");
  const onOver = useCallback((event: ThreeEvent<PointerEvent>) => {
    if (!(event.eventObject instanceof Mesh)) {
      throw new Error("Expected event object to be a mesh");
    }
    event.eventObject.material.emissive = new Color("#00ff00");
    event.eventObject.material.emissiveIntensity = 0.1;
  }, []);
  const onOut = useCallback((event: ThreeEvent<PointerEvent>) => {
    if (!(event.eventObject instanceof Mesh)) {
      throw new Error("Expected event object to be a mesh");
    }
    event.eventObject.material.emissiveIntensity = 0;
  }, []);
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.guy.geometry}
        material={materials.guy}
        position={[-3.942, 1.542, 1.918]}
        rotation={[Math.PI / 2, 0, Math.PI]}
        scale={0.365}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        receiveShadow
        geometry={nodes["tourist-go-home"].geometry}
        material={materials["tourist-go-home"]}
        position={[-4.487, 1.368, -2.686]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.925}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cloth.geometry}
        material={materials.Rubber}
        position={[-1.837, 1.616, 1.11]}
        rotation={[0, -0.392, 0]}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        receiveShadow
        geometry={nodes.face.geometry}
        material={materials.face}
        position={[-3.401, 1.161, 3.333]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={1.762}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cat.geometry}
        material={materials.cat}
        position={[-12.225, 1.555, 7.622]}
        rotation={[Math.PI / 2, 0, Math.PI / 2]}
        scale={1.042}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.attenzione.geometry}
        material={materials["Material.001"]}
        position={[-15.07, 0.737, 8.298]}
        rotation={[Math.PI, -0.353, Math.PI]}
        scale={0.661}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["kith-and-kin"].geometry}
        material={materials["kith-and-kin"]}
        position={[-10.906, 1.568, 6.55]}
        rotation={[Math.PI / 2, 0, Math.PI]}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.FlowerBox001.geometry}
        material={materials["Material.002"]}
        position={[-8.528, 1.118, 8.941]}
        rotation={[3.03, -0.023, -1.859]}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.MigrantChild.geometry}
        material={materials["migrant-child"]}
        position={[-11.043, 0.499, 12.149]}
        rotation={[Math.PI / 2, 0, Math.PI]}
        onPointerOver={onOver}
        onPointerOut={onOut}
      />
    </group>
  );
}

useGLTF.preload("/assets/pieces.glb");
